security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            entry_point: jwt # para simultanear los dos tipos de login: formulario y json

            json_login:
                # indicamos la ruta para realizar la autenticación y obtener el token, es un proceso automático y transparente para el programador
                # que no requiere de ningún controlador creado expresamente. Sería como un controlador interno
                check_path: /api/login 
                # los datos necesarios para la identificación
                username_path: username 
                password_path: password
                # Clase (servicio) al que llamaremos si la autenticación tiene éxito. Será necesario registrar la clase como un servicio en services.yaml
                # La identificación se hace automática, después se llama a la siguiente clase para generar el token
                success_handler: App\Security\JwtSuccessHandler

            # indicamos que será jwt quien se encargue de la gestión de tokens. Es una configuración básica
            jwt:    

            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_my_wall
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
